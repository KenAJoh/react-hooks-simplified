{
  "useState": {
    "prefix": ["useState", "state"],
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:type}>(${3:init})"
    ],
    "description": "React useState"
  },
  "useEffect": {
    "prefix": ["useEffect", "effect"],
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  ${2:return () => }",
      "}, [${3:deps}])",
      ""
    ],
    "description": "React useEffect"
  },
  "useLayoutEffect": {
    "prefix": ["useLayoutEffect", "layouteffect"],
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  ${2:return () => }",
      "}, [${3:deps}])",
      ""
    ],
    "description": "React useLayoutEffect"
  },
  "useCallback": {
    "prefix": ["useCallback", "callback", "cb"],
    "body": [
      "const ${1:name} = useCallback(",
      "  () => {",
      "    ${2}",
      "  },",
      "  [${3:deps}],",
      ")",
      ""
    ],
    "description": "React useCallback"
  },
  "useContext": {
    "prefix": ["useContext", "context", "ctx"],
    "body": ["const ${1:name} = useContext<${2:type}>(${3:ctx})"],
    "description": "React useContext"
  },
  "useMemo": {
    "prefix": ["useMemo", "memo"],
    "body": ["const ${1:name}: ${2:type} = useMemo(() => ${3:val}, [${4:deps}])"],
    "description": "React useMemo"
  },
  "useRef": {
    "prefix": ["useRef", "ref"],
    "body": ["const ${1:name} = useRef<${2:type}>(${3:default})"],
    "description": "React useRef"
  },
  "cla": {
    "prefix": ["className", "class"],
    "body": ["className=${1:\"\"}"],
    "description": "React className shortcut"
  },
  "useEvent": {
    "prefix": ["useEvent", "event"],
    "body": [
      "const ${2:callback} = useCallback(",
      "  () => {",
      "    ${4}",
      "  },",
      "  [${3:deps}],",
      ");",
      "",
      "useEffect(() => {",
      "  window.addEventListener(${1:event}, ${2:callback});",
      "",
      "  return () => {",
      "    window.removeEventListener(${1:event}, ${2:callback});",
      "  };",
      "}, [${2:callback}]);"
    ],
    "description": "React event snippet with callback"
  },
  "cl": {
    "prefix": ["console.log", "log", "console"],
    "body": ["console.log(\\{${$1: value}\\})"],
    "description": "Better console.log snippet"
  },
  "useTransition": {
    "prefix": ["useTransition", "transition"],
    "body": ["const [isPending, startTransition] = useTransition();"],
    "description": "React useTransition"
  }
}
